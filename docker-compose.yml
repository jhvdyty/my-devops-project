# version: '3.8'

services:

# Service API
  service-api:
    build:
      context: ./app/service-api
      dockerfile: Dockerfile
    container_name: service-api
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/microservices_db
      - REDIS_URL=redis://redis:6379/0
      - SERVICE_API_URL=http://service-api:5000
    depends_on:
      - postgres
      - redis
    volumes:
      - ./app/service-api:/app
    networks:
      - microservices
      
# Service Catalog
  service-catalog:
    build:
      context: ./app/service-catalog
      dockerfile: Dockerfile
    container_name: service-catalog
    ports:
      - "5001:5000"
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/microservices_db
      - REDIS_URL=redis://redis:6379/0
      - SERVICE_API_URL=http://service-api:5000
    depends_on:
      - postgres
      - redis
      - service-api
    volumes:
      - ./app/service-catalog:/app
    networks:
      - microservices

# PostgreSQL Database
  postgres:
    image: postgres:16.0
    container_name: postgres
    environment:
      - POSTGRES_DB=microservices_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data 
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - microservices

# Redis for caching
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices
  
# Nginx as reverse proxy
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - service-api
      - service-catalog
    networks:
      - microservices

# Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - microservices
    # Убрали profiles для постоянной работы
    
# Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - microservices
    # Убрали profiles для постоянной работы

volumes:
  postgres_data:
  redis_data:
  grafana_data:

networks:
  microservices:
    driver: bridge